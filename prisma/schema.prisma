// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum ProgressionState {
  SLIM
  FIT
  STRONG
  FIERY
}

enum SetType {
  WARMUP
  NORMAL
}

enum SessionStatus {
  ACTIVE
  FINISHED
}

enum EffortLevel {
  EASY_1
  EASY_2
  EASY_3
  MODERATE_4
  MODERATE_5
  MODERATE_6
  HARD_7
  HARD_8
  ALL_OUT_9
  ALL_OUT_10
}

enum WorkoutStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

// Core User Management
model User {
  id               String          @id @default(cuid())
  clerkUserId      String          @unique @map("clerk_user_id")
  displayName      String?         @map("display_name")
  avatarUrl        String?         @map("avatar_url")
  weeklyGoal       Int             @default(2) @map("weekly_goal")
  progressionState ProgressionState @default(SLIM) @map("progression_state")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  workouts Workout[]
  sessions Session[]

  @@map("users")
}

// Shared Exercise Vocabulary
model MuscleGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  exercises Exercise[]

  @@map("muscle_groups")
}

model Equipment {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  exercises Exercise[]

  @@map("equipment")
}

model Exercise {
  id             String       @id @default(cuid())
  name           String
  description    String?
  muscleGroupId  String?      @map("muscle_group_id")
  equipmentId    String?      @map("equipment_id")
  instructions   String?
  imageUrl       String?      @map("image_url")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  muscleGroup    MuscleGroup? @relation(fields: [muscleGroupId], references: [id])
  equipment      Equipment?   @relation(fields: [equipmentId], references: [id])
  workoutItems   WorkoutItem[]
  sessionExercises SessionExercise[]

  @@index([name])
  @@index([muscleGroupId])
  @@index([equipmentId])
  @@map("exercises")
}

// User Workout Templates
model Workout {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  title       String
  description String?
  status      WorkoutStatus @default(ACTIVE)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutItems WorkoutItem[]
  sessions     Session[]

  @@map("workouts")
}

model WorkoutItem {
  id         String   @id @default(cuid())
  workoutId  String   @map("workout_id")
  exerciseId String   @map("exercise_id")
  order      Int
  notes      String?
  blockId    String?  @map("block_id")
  blockOrder Int?     @map("block_order")

  // Relations
  workout         Workout         @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise        Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workoutItemSets WorkoutItemSet[]

  @@unique([workoutId, order])
  @@map("workout_items")
}

model WorkoutItemSet {
  id             String  @id @default(cuid())
  workoutItemId  String  @map("workout_item_id")
  type           SetType
  targetLoad     Decimal @map("target_load")
  targetReps     Int     @map("target_reps")
  order          Int
  notes          String?

  // Relations
  workoutItem WorkoutItem @relation(fields: [workoutItemId], references: [id], onDelete: Cascade)

  @@unique([workoutItemId, order])
  @@map("workout_item_sets")
}

// Actual Workout Sessions
model Session {
  id               String        @id @default(cuid())
  userId           String        @map("user_id")
  workoutId        String?       @map("workout_id")
  date             DateTime      @default(now())
  status           SessionStatus @default(ACTIVE)
  duration         Int?          // Duration in seconds
  devotionScore    Int?          @map("devotion_score") // 0-100 Commitment & Devotion Score
  devotionGrade    String?       @map("devotion_grade") // "Dialed in", "On plan", "Loose", "Off plan"
  devotionPillars  Json?         @map("devotion_pillars") // {EC: 0.95, SC: 0.88, RF: 0.92, LF: 0.85}
  devotionDeviations Json?       @map("devotion_deviations") // Top 3 deviations for "Why this score?"
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout          Workout?          @relation(fields: [workoutId], references: [id])
  sessionExercises SessionExercise[]
  sessionSeal      SessionSeal?

  @@index([userId, date])
  @@map("sessions")
}

model SessionExercise {
  id         String   @id @default(cuid())
  sessionId  String   @map("session_id")
  exerciseId String   @map("exercise_id")
  order      Int
  notes      String?

  // Relations
  session     Session      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  exercise    Exercise     @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  sessionSets SessionSet[]

  @@unique([sessionId, order])
  @@map("session_exercises")
}

model SessionSet {
  id                String  @id @default(cuid())
  sessionExerciseId String  @map("session_exercise_id")
  type              SetType
  load              Decimal
  reps              Int
  completed         Boolean @default(false)
  order             Int
  notes             String?

  // Relations
  sessionExercise SessionExercise @relation(fields: [sessionExerciseId], references: [id], onDelete: Cascade)

  @@unique([sessionExerciseId, order])
  @@map("session_sets")
}

model SessionSeal {
  sessionId String      @id @map("session_id")
  effort    EffortLevel
  vibeLine  String      @map("vibe_line")
  note      String?
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_seals")
}